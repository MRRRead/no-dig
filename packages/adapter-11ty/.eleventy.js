import path from 'path';
import { fileURLToPath } from 'url';

// Try to load plugins from a resolved list (e.g., plugins.js or config)
let plugins = [];
try {
  // Try to import a plugins.js file in the adapter root (generated by CLI/core)
  const __dirname = path.dirname(fileURLToPath(import.meta.url));
  const pluginsPath = path.resolve(__dirname, 'plugins.js');
  // eslint-disable-next-line import/no-dynamic-require
  plugins = (await import(pluginsPath)).default || [];
} catch (e) {
  // No plugins.js found; fallback to empty array
  plugins = [];
}

// We don't need to import directly from the adapter since we're in our own config
// The adapter functionality is used by the NO-DIG CLI when running builds

export default async function(eleventyConfig) {
  if (plugins.length > 0) {
    // Register plugins from the plugins.js file
    plugins.forEach((plugin) => {
      if (typeof plugin === 'object' && plugin.plugin && plugin.options) {
        eleventyConfig.addPlugin(plugin.plugin, plugin.options);
      } else {
        eleventyConfig.addPlugin(plugin);
      }
    });
  } else {
    // Fallback: add interlinker directly for legacy/test/dev
    const __dirname = path.dirname(fileURLToPath(import.meta.url));
    const pluginPath = path.resolve(
      __dirname,
      '../../node_modules/@photogabble/eleventy-plugin-interlinker/index.js',
    );
    const pluginUrl = pluginPath.startsWith('/')
      ? `file://${pluginPath}`
      : `file:///${pluginPath.replace(/\\/g, '/')}`;
    const interlinker = (await import(pluginUrl)).default;
    eleventyConfig.addPlugin(interlinker, {
      baseDir: 'test-fixtures/sample-vault',
      titleAttr: true,
    });
  }

  eleventyConfig.addPassthroughCopy({ 'src/input.css': 'input.css' });

  return {
    dir: {
      input: 'test-fixtures/sample-vault',
      output: '_site',
      includes: '../../src', // so base.njk/page.njk are found
      data: '_data',
    },
    markdownTemplateEngine: 'njk',
    htmlTemplateEngine: 'njk',
    templateFormats: ['md', 'njk', 'html'],
    passthroughFileCopy: true,
    pathPrefix: '/',
  };
}

